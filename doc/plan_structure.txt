

PLAN / STRUCTURE:

REST URIs:

Collection:				/questions						/users
Item:					/questions/<qId>				/users/<uId>
Pagination:				/questions?offset=0&limit=10 	/users?offset=0&limit=10

Questions Answered:		/questions/<qId>?options=correct-answer





REST API Design Checklist:

- Use nouns, not verbs (e.g. users instead of getUsers)
- Use plural noun, not single (e.g. users instead of user)
- Concrete names better than abstract (e.g. questions better than posts, users better than people)
- Complex variations, like searching for items with various attribute/values, use params. (e.g. /questions?subject=math&grade=11 is better than /questions/math/grade/11)
- For errors provide proper http status code, special error code, verbose error message, link for describing error message/code.
- Use a "v" followed by the version number (v1) for API version.
- Put version as far left in the URI as possible (e.g. /v2/questions).
- For filtering the fields we want, use a param with string value containing a comma-separated list of fields (e.g. /questions?fields=qText,ansCorrect,qLang).
- Use offset and limit params for pagination (e.g. /questions?offset=26&limit=25 returns questions 26 to 50).
- Use verbs instead nouns for non-resourcy, algorithmic data/operations (e.g. /convert?from=EUR&to=USD&amount=100)
- Use (e.g. /search?q=stuff+to+search) for global search. Add more params for search options (e.g. /search?q=stuff+to+search&lang=ps). Its Google's method.
- For scoped search use (/questions/search?q=stuff+to+search). This will search only questions.
- Use latest OAuth for authentication.


General Structure
/collection/item 			A single item from collection
/collection/item-item		A list of items from collection